set background=dark
hi LspError ctermfg=Red
hi LspWarning ctermfg=Yellow

call plug#begin('~/.vim/plugged')

"Plug 'morhetz/gruvbox'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'rhysd/vim-clang-format'
Plug 'tpope/vim-fugitive'

call plug#end()

"colorscheme gruvbox
set nocompatible
set modeline
set modelines=5
set autoindent
syntax enable
set hidden
set tabstop=2
set expandtab
set shiftwidth=2
set laststatus=2
"let NERDTreeIgnore = ['\.o$','\.d']
set noeb vb t_vb=
au GUIEnter * set vb t_vb=

filetype plugin indent on

" Command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" If no errors, it closes any open cwindow.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
autocmd QuickFixCmdPost  make nested botright cwindow
set colorcolumn=+1

"nmap t :TagbarToggle<CR>
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'wrc'
set wildmode=longest,list,full
set wildmenu

set spell
let g:airline#extensions#whitespace#show_message = 0
let g:airline_detect_spell=0
let g:airline_detect_mode=0
let g:airline_bg='dark'
"let g:airline_powerline_fonts = 1
hi clear SpellBad
hi SpellBad term=underline cterm=underline
hi Comment ctermfg=gray
set formatoptions-=tc
let g:clang_format#detect_style_file = 1
let g:clang_format#auto_formatexpr = 1
autocmd FileType go set formatprg=gofmt

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'clangd',
                    \ 'cmd': {server_info->['clangd']},
                    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                    \ })
    augroup end
endif

function! s:on_lsp_buffer_enabled() abort
    set signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <C-x> <plug>(lsp-code-action)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 0

let g:lsp_document_code_action_signs_hint = {'text': ' »'}
let g:lsp_diagnostics_signs_warning = {'text': ' ⚠'}
let g:lsp_diagnostics_signs_error = {'text': ' ✗'}

function! KatanaNodeEdgeHighlighting()
  if (stridx(expand('%:p'), 'katana') >= 0)
    " absolute path of open buffer contains the word "katana"
    syn match katanaNode /node\|Node/
    syn match katanaEdge /edge\|Edge/
    hi katanaNode cterm=bold ctermfg=Cyan
    hi katanaEdge cterm=bold ctermfg=Red
  endif
endfunction()
          
" Call this function every time a color scheme is loaded
autocmd bufenter * :call KatanaNodeEdgeHighlighting()
autocmd filetype * :call KatanaNodeEdgeHighlighting()

set diffopt+=vertical
set makeprg=ninja

" extra logging to debug lsp issues
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')
